.TH sqlexecution "1rwl" "September 2020" "RWP*Load Simulator" "Program Syntax"
.SH NAME
sqlexecution \- RWP*Load Simulator execute sql, PL/SQL or cursor loops
.SH SYNTAX
.nf
terminatedstatement ::=
  identifier \fB;\fR
| immediatesql [ atclause ]  \fB;\fR
| embeddedsqltext 
| embeddedsqltext atclause \fB;\fR

cursorloop ::=
  \fBfor\fR { identifier | immediatesql | embeddedsqltext }
    [ atclause ]
    [ \fBand\fR expression ]
  \fBloop\fR
    statementlist
  \fBend\fR [ \fBloop\fR ]

.fi
.SH DESCRIPTION
.PP 
.nf
\fBembeddedsqltext\fR 
\fBfor embeddedsqltext loop\fR s;s;s; \fBend\fR
.fi
.RS 4
The most simple way to execute is to embed the sql text directly in your
program, which can be done if only implicit bind and define is needed.
If an at clause is provided, the execution will be against the specified database.
It is highly recommended that if the sql statement is a query, it is expected to
return (at most) one row.
For queries returning an unknown number of rows, use the cursor loop syntax,
which can include an at clause and an and condition as needed.
You can provide array size for query respectively dml using the directive 
$embeddedqueryarray or $embeddeddmlarray.
.RE
.PP
\fBidentifier\fR 
.RS 4
An identifier that is not followed by an open parenthesis must be a SQL statement
which is executed once.
If an at clause is provided, the execution will be against the specified database.
It is highly recommended that if the sql statement is a query, it is expected to
return (at most) one row.
.P
If the SQL statement is a dml that has an array size set, rwloadsim will buffer 
executions until the array is filled or a commit or rollback is executed.
.RE
.PP
\fBfor\fR c \fBat\fR d \fBand\fR e \fBloop\fR s;s;s; \fBend\fR
.RS 4
The identifier c must refer to a SQL statement that is a query,
and the statement list between 
.B loop
and 
.B end
will be executed once for each row fetched from the query.
If no rows are returned, no execution will take place.
The optional at clause can be used to choose a particular database, d,
otherwise the currently chosen one will be used.
.P
If array fetch is active (which is the case by default), rwloadsim will use the Oracle Call Interface
array fetch capabilities;
if \fBdefine array\fR is used, rwloadsim will create a client side array.
In either case, actual fetch of rows from the database will take place initially 
and subsequently only when the array has been exhausted in the loop.
.P
The optional 
.B and
followed by an expression e before the
.B loop
keyword
will cause the cursor to be canceled when the expression is zero.
Note that due to array fetching,
some rows may have been fetched from the database but not yet processed when the condition after
.B and
becomes false.
The cursor will also be canceled if you perform a 
.B break
or a 
.B return
from inside the loop.
.RE
.P
.nf
\fBsql execute ... end\fR
\fBfor sql execute ... end at\fR d \fBand\fR e \fBloop\fR s;s;s; \fBend\fR
.fi
.RS 4
In stead of an identifier that refers to a declared SQL statement you
can immediately execute a SQL statement or a cursor loop by using the syntax
for immediate sql beginning with
.B sql execute
and terminating with
.B end
as documented in sqldeclaration(1rwl).
With this syntax, the at clause and the
.B and
keyword followed by an expression have the same effects as they do when
executing named SQL statements.
.SH EXAMPLES
.P
.B Cursor loop with embedded sql
.P
This example shows how to declare some variables that match
select list elements and bind variables in your SQL statement.
The sql statement is not declared, but is embedded
as a cursor loop against some specified database.
.P
.RS 4
.nf
string ename, dname;
integer empno;
double monthsal;
integer deptno := 10; $useroption:deptno
for
  select e.empno, e.ename, d.dname
  , e.sal/12 monthsal
  from emp e join dept d
  on e.deptno = d.deptno
  where d.deptno=:deptno
  /
at mydatabase
loop
  printf "%5d %10s %6.2f %10s\n", empno, ename, monthsal, dname;
end loop;
.fi
.RE
.P
For more examples, see sqldeclaration(1rwl).
.SH NOTES
Embedded sql text does itself include a terminator
(for both SQL and PL/SQL a line with only white space terminated by \fB/\fR or \fB.\fR
or for SQL a \fB;\fR at the end of a line)
and that it therefore should not be followed by another terminating \fB;\fR when
used as a simple statement.
In other cases, such as when an at clause is present, the complete statement must
be terminated with an \fB;\fR as any other statement in rwloadsim.
.P
After executing DML, you should always have either a \fBcommit\fR or \fBrollback\fR, and
rwloadsim will display a warning and force a rollback if this is missing.
In your main program, such statements must be wrapped in an executionblock unless you have
a default database declared as dedicated.
.SH COPYRIGHT
Copyright \(co 2022 Oracle Corporation
.br
Licensed under the Universal Permissive License v 1.0
as shown at https://oss.oracle.com/licenses/upl
.SH "SEE ALSO"
statement(1rwl), identifier(1rwl), sqldeclaration(1rwl), sqlstatement(1rwl), 
atclause(1rwl), databasestatement(1rwl),
expression(1rwl), compoundstatement(1rwl)
