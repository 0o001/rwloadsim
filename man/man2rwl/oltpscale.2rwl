.TH oltpscale "2rwl" "July 2022" "RWP*Load Simulator" "Workload Syntax"
.SH NAME
oltpscale \- Perform several runs and finally a scaling graph
.SH SYNOPSIS
\fBoltpscale [-H] [-g|-G] [-a] [-A] [-k key] [-r runperiod] [-b] [-l lo] [-h hi] [-i int] [-K n] [-W] [-R file] [komment text ...]\fR
.P
Execute a series of runs with increasing number of processes and produce a scalability
report with graphs, etc.
.P
You can alternatively use the gnu style long options shown below.
.SH OPTIONS
.B -H --help
.RS 4
Print short help.
.RE
.P
.B -l --loprocess N
.RS 4
Set the lowest number of processes and the increase in process count
between runs.
.RE
.P
.B -i --interval N
.RS 4
Set the increase in process count between runs; default is the same as
the lowest process count.
.RE
.P
.B -h --hiprocess N
.RS 4
Set the highest number of processes being used in one run.
.RE
.P
.B -n --processcount N
.RS 4
Execute this as a scaling run, but with only one actual run having this
many processes.
.RE
.P
.B -k --key key
.RS 4
Set the key that will be used when storing results in the repository database and
will be used as the base-name of the generated html scaling report.
Note that the key 
.B must
be unique for your host as there otherwise would be results from several overlapping/identical
runs in the same scaling report.
.RE
.P
.B -A --allowreuse
.RS 4
Allow reuse of key; this should only be used if you know there will be no
repetition of runs with same process count.
.RE
.P
.B -r --runperiod N
.RS 4
Set the runperiod in seconds for each run; the default is 595s.
.RE
.P
.B -b|--simulatebatch 
.RS 4
In stead of the normal simulation of an average arrival rate, run everything in a busy
loop without any waiting/queuing taking place.
You typically do this with much fewer threads (and/or processes) as each thread in 
each process constantly will be executing emulated business transactions.
.P
Note that all burst features are turned off and that only the processing in the normal
pool (set via pool_type in your project file) is done.
You should normally arrange for your connections to be dedicated
and set pool_type:="dedicated", but
if you do use e.g. sessionpool, sessions will constantly be acquired and released.
.RE
.P
.B -g|--graphs|-G|--qegraphs
.RS 4
Show graphs during the run using gnuplot's output to X-Windows.
This requires a properly set DISPLAY environment variable.
The two latter options causes an alternative graph; see oltprun(2rwl).
.RE
.P
.B -a|--preallocate
.RS 4
If your orders and order_items tables are partitioned, you can use
the -a option to make sure an empty set of partitions are created
at the start of the run.
Only use this if the automatic allocation via interval
partitions appears to cause trouble
.RE
.P
.B -R|--runfile file
.RS 4
In stead of using the normal run.rwl file found in the oltp directory, use
the file named.
The primary use of this is for experiments that require modifications to run.rwl.
.RE
.P
.B -W --awrwait
.P
.B -K --awrkill n
.RS 4
See COMPLETION at oltpcore(2rwl).
.RE
.SH USAGE
You typically call this providing values for -k, -l and -h.
The result files (html and graphs) will include titles from 
your parameter file, but
you can provide additional text by adding extra arguments to
the oltpscale command.
.P
To verify that a key does not already exist from your host, use oltpcheckkey.
.SH COPYRIGHT
Copyright \(co 2023 Oracle Corporation
.br
Licensed under the Universal Permissive License v 1.0
as shown at https://oss.oracle.com/licenses/upl
.SH "SEE ALSO"
oltp(2rwl), oltprun(2rwl), oltpcheckkey(2rwl), oltpscalereport(2rwl)
