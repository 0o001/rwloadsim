.TH oltpcore "2rwl" "July 2022" "RWP*Load Simulator" "Workload Syntax"
.SH NAME
oltpcore \- Perform one run using the oltp workload
.SH SYNOPSIS
\fB[-H] [-g|-G] [-a] [-n processes] [-k key] [-r runperiod] [-b] [-R runfile] [-W] [-K nn] [-p file] [-s file] [-o file] komment text ...\fR
.P
Execute one run using the oltp workload, saving intermediate results in 
the results directory and partially making final results 
available in the awr directory for browsing.
Note that stdout and stderr are not saved.
.P
Any arguments are added as extra komment text using -K option to rwloadsim; it must be preceded by -- if it
includes any text that appear like options.
.P
Options can be provided using gnu style long options as shown below.
If a short options takes an argument, so does a long option.
.SH OPTIONS
\fB-H|--help\fR 
.RS 4
Print short help.
.RE
.P
.B -n|--processcount N
.RS 4
Set the number of processes, default 1
.RE
.P
.B -k|--key key
.RS 4
Set the key that will be used when storing results in the repository database.
The default is the same as the project name.
.RE
.P
.B -r|--runperiod N
.RS 4
Set the runperiod in seconds; the default is 295s.
You will get the nicest graphs if the value chosen is a bit less than a multiple
of 300s.
If less than 120s, no awr reports will be created.
.RE
.P
.B -b|--simulatebatch 
.RS 4
In stead of the normal simulation of an average arrival rate, run everything in a busy
loop without any waiting/queuing taking place.
You typically do this with much fewer threads (and/or processes) as each thread in 
each process constantly will be executing emulated business transactions.
.P
Note that all burst features are turned off and that only the processing in the normal
pool (set via pool_type in your project file) is done.
You should normally arrange for your connections to be dedicated
and set pool_type:="dedicated", but
if you do use e.g. sessionpool, sessions will constantly be acquired and released.
.RE
.P
.B -g|--graphs|-G|--qegraphs
.RS 4
Show graphs during the run using gnuplot's output to X-Windows.
This requires a properly set DISPLAY environment variable.
The two latter options causes an alternative graph; see oltprun(2rwl).
.RE
.P
.B -p|--runnumberfile file
.RS 4
Put the runnumber into file (default runnumber.txt)
.RE
.P
.B -s|--startseconds file
.RS 4
Put the startseconds into file (default startseconds.txt)
.RE
.P
.B -R|--runfile file
.RS 4
In stead of using the normal run.rwl file count in the oltp directory, use
the file named.
The primary use of this is for experiments that require modifications to run.rwl.
.RE
.P
.B -a|--preallocate
.RS 4
If your orders and order_items tables are partitioned, you can use
the -a option to make sure an empty set of partitions are created
at the start of the run.
Only use this if the automatic allocation via interval
partitions appears to cause trouble
.RE
.P
.B -o|--extraoutput file
.RS 4
Add the contents of the named text file to generated html output; this can be used if you want
to add more information than feasible using komment.
.RE
.P
.B -i|--integer|-d|--double spec
.RS 4
Provide the option to rwloadsim when doing the actual run, i.e. when run.rwl (or the file
given as the -R option) is executed.
.RE
.P
.B -W|--awrwait
.P
.B -K|--awrkill n
.RS 4
See below under COMPLETION
.RE
.SH COMPLETION
Under normal circumstances, all the processes started by oltpcore should
complete, and it should therefore be feasible to simple have a "wait" at
the end of the script.
If, however, one or more of the processes take an unexpectedly long time
to complete or even never completes, such a "wait" would also not complete
(in reasonable time).
Therefore, oltpcore has a mechanism that will kill processes taking longer
than expected.
For most processes that do actual simulation work, a consequence of this
is simply that the process gets canceled, but for the process gathering
awr and other system statistics, it means no awr will be produced.
Oltpcore therefore waits as long as possible until killing the awr gathering
process, but it will do so eventually.
If you find that your awr reports does not get created even when things
otherwise are running normally, you can change the behavior in one of two ways:
.P
By using the \fB-W\fR option, oltpcore will
.I always
wait for the awr gathering process which does increase the risk that some
system failure will cause oltpcore to wait for a very long time or even not complete.
.P
By using the \fB-K nn\fR option, you can change the default time of 15s before
the final kill will be performed. The implication is that if there are
processes to be killed, the final wait time (and therefore total execution time)
will be longer, but oltpcore is guaranteed to complete.
.SH USAGE
The 
.B oltpcore
command shows stdout and stderr to the terminal, so you can immediately see
any errors, but only stdout will be save to a file.
You should therefore only use this command initially while you verify
everything is working as expected.
Otherwise, always use the oltprun(2rwl) command that makes both stdout and stderr
available for later browsing, but only outputs stdout to the terminal.
.SH COPYRIGHT
Copyright \(co 2022 Oracle Corporation
.br
Licensed under the Universal Permissive License v 1.0
as shown at https://oss.oracle.com/licenses/upl
.SH "SEE ALSO"
oltpsetup(2rwl), oltprun(2rwl)
