.TH oltpcore "2rwl" "December 2020" "RWP*Load Simulator" "Workload Syntax"
.SH NAME
oltpcore \- Perform one run using the oltp workload
.SH SYNOPSIS
\fB[-H] [-g] [-2] [-a] [-n processes] [-k key] [-r runperiod] [-R runfile] [-W] [-K nn] [-p file] [-s file] komment text ...\fR
.P
Execute one run using the oltp workload, saving intermediate results in 
the results directory and partially making final results 
available in the awr directory for browsing.
Note that stdout and stderr are not saved.
.SH OPTIONS
\fB-H\fR
.RS 4
Print short help.
.RE
.P
.B -n N
.RS 4
Set the number of processes, default 1
.RE
.P
.B -k key
.RS 4
Set the key that will be used when storing results in the repository database.
The default is the same as the project name.
.RE
.P
.B -r N
.RS 4
Set the runperiod in seconds; the default is 295s.
You will get the nicest graphs if the value chosen is a bit less than a multiple
of 300s.
If less than 120s, no awr reports will be created.
Be quiet, no connect messages, and some warnings muted
.RE
.P
.B -g
.RS 4
Show graphs during the run using gnuplot's output to X-Windows.
This requires a properly set DISPLAY environment variable.
.RE
.P
.B -2
.RS 4
Use side 2 for the aw_transaction workload; it is used by oltpforever2 and
should not be done directly by the user.
.RE
.P
.B -p file
.RS 4
Put the runnumber into file (default runnumber.txt)
.RE
.B -s file
.RS 4
Put the startseconds into file (default startseconds.txt)
.RE
.B -R file
.RS 4
In stead of using the normal run.rwl file count in the oltp directory, use
the file named.
The primary use of this is for experiments that require modifications to run.rwl.
.RE
.P
.B -a
.RS 4
If your orders and order_items tables are partitioned, you can use
the -a option to make sure an empty set of partitions are created
at the start of the run.
Only use this if the automatic allocation via interval
partitions appears to cause trouble
.RE
.P
.B -W
.P
.B -K n
.RS 4
See below under COMPLETION
.RE
.SH COMPLETION
Under normal circumstances, all the processes started by oltpcore should
complete, and it should therefore be feasible to simple have a "wait" at
the end of the script.
If, however, one or more of the processes take an unexpectedly long time
to complete or even never completes, such a "wait" would also not compelte
(in reasonable time).
Therefore, oltpcore has a mechanism that will kill processes taking longer
than execpted.
For most processes that do actual simulation work, a conssequence of this
is simply that the process gets cancelled, but for the process gathering
awr and other system statistics, it means no awr will be produced.
Oltpcore thefore waits as long as possible until killing the awr gathering
process, but it will do so eventually.
If you find that your awr reports does not get created even when things
otherwise are running normally, you can change the behavior in one of two ways:
.P
By using the \fB-W\fR option, oltpcore will
.I always
wait for the awr gathering process which does increase the risk that some
system failure will cause oltpcore to wait for a very long time or even not coplete.
.P
By using the \fB-K nn\fR option, you can change the default time of 15s before
the final kill will be performed. The implication is that if there are
processes to be killed, the final wait time (and therefore total execution time)
will be longer, but oltpcore is guaranteed to complete.
.SH USAGE
You should only use this command initially while you verify
everything is working as expected.
Otherwise, always use the oltprun command that make stdout and stderr
available for later browsing.
.SH COPYRIGHT
Copyright \(co 2021 Oracle Corporation
.br
Licensed under the Universal Permissive License v 1.0
as shown at https://oss.oracle.com/licenses/upl
.SH "SEE ALSO"
oltprun(2rwl)
