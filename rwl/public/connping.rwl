# 
# Execute something similar to "ping", but show both time to make 
# a connection and to execute both ociping and select 1 from dual
#
# You need to specify a default database using -l
# session pool with max poolsize of 1, so you must include -X 1 
# (--default-max-pool 1).  A sample usage is therefore:
#
# rwloadsim -l scott/tiger@//host/service connping.rwl
#
# It runs by default 1 minute with by default 1 second between each connect
# but you can change these values.
#
# For e.g. 20 seconds with 0.5 seconds between each connect
#
# rwloadsim -X 1 --period=20 --interval=0.5 -l scott/tiger
#
# If you leave out either of '--period' or '--interval'
# you will get the defaults of 60 and 1.

# Make it use a size one session pool
$longoption:default-reconnect

# Ignore warning about ignoring error
$mute:73 # RWL-073: warning at [demo/connping.rwl;21]: muting non-warning 22
# and ignore the division by zero error
$mute:22 # RWL-022: error at [demo/connping.rwl;109]: attempted division by zero

double dd, d, d0, t0, t2;
double threads sum tsum := 0.0, tsq := 0.0, tcnt := 0.0;
double threads sum t0sum := 0.0, t0sq := 0.0, t0cnt := 0.0;
double threads sum tdsum := 0.0, tdsq := 0.0, tdcnt := 0.0;

double period := 60; $useroption:period
double interval := 1.0; $useroption:interval

$clockstart:0

integer firsttime := 1;

# The procedure oneping will get a session
# from the pool and then execute ociping
# we time both and calculate the sum, etc
procedure oneping()
  integer one, sid, inst;

  # Just to show some information to the user
  # Note that this query in itself is not timed
  sql selsidinst
    select sys_context('USERENV','SID')
    , sys_context('USERENV','INSTANCE') 
    from dual;
    define 1 sid, 2 inst;
  end;

  sql sel1dual
    select 1 from dual;
    define 1 one;
  end;

  # In first call, there will be a session in the pool
  # because we haven't done release database yet.
  # The first call therefore just does release database
  if ! firsttime then
    # We have now acquired the session, so see how long that took
    d0 := 1000.0 *(runseconds-t0);
    # Sum etc of connect times
    t0cnt += 1.0;
    t0sum += d0;
    t0sq += d0*d0;
    selsidinst; # Get session information

    ociping; # To make sure everything is in whatever caches
    # And now really measure ociping
    t2 := runseconds;
    ociping;
    d := 1000.0 * (runseconds-t2);
    # Sum etc of ociping times
    tsum += d;
    tsq += d*d;
    tcnt += 1.0;

    # Now do the same with select 1 from dual
    sel1dual; # To make sure everything is in whatever caches
    # And now really measure sel1dual
    t2 := runseconds;
    sel1dual;
    dd := 1000.0 * (runseconds-t2);
    # Sum etc of ociping times
    tdsum += dd;
    tdsq += dd*dd;

    tdcnt += 1.0;
    # Print a line to the user
    printline "connect:", d0, "ms, ociping:", d, "ms, dualping:", dd, "ms, sid="||sid||", inst#="||inst;
  end if;
  firsttime := 0;
  release database;
end oneping;

run 
  threads 1 
    loop every interval stop period;
      # Save time before call to oneping, i.e. time
      # just before we acquire the session
      t0 := runseconds;
      oneping();
    end loop;
  end threads;
end run;

# Print final results 
#if t0cnt > 0 and tcnt > 0 and tdcnt > 0 then
  printline "connect mean="||t0sum/t0cnt, "stddev="||sqrt((t0sq-t0sum*t0sum/t0cnt)/t0cnt);
  printline "ociping mean="||tsum/tcnt, "stddev="||sqrt((tsq-tsum*tsum/tcnt)/tcnt);
  printline "dualping mean="||tdsum/tdcnt, "stddev="||sqrt((tdsq-tdsum*tdsum/tdcnt)/tdcnt);
#else
#  writeline stderr, "aborted";
#end if;
    
