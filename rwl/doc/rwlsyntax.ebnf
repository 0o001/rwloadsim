/* Load this file to http://www.bottlecaps.de/rr/ui */

/* in options, tick direct recursion eliminition, untick factoring, untick show EBNF, set max 640 width pixel */

rwlprogram ::= ( 
	( simpledeclaration 
	| statement 
	| declaration
	| threadexecution ) ";"
	) +

statementlist ::= ( 
	( simpledeclaration 
	| statement) ";"
	) +


statement ::= 
          identifier "(" ( expression ( "," expression )* ) ? ")" atclause ?
        | identifier atclause ?
        | identifier (":="|"||="|"+=") concatenation
	| "null" concatenation ?
	| "return" concatenation ? 
        | "shift" 
        | "wait" expression
	| "getrusage"
	| regexsearch
	| regexsubstitute
	| compoundstatement
	| filestatement
        | databasestatement
        | sqlstatement
	| "abort"

simpledeclaration ::= "private" ? 
	(
	  scalardeclaration
	| sqldeclaration
	| lobdeclaration
	)

scalardeclaration ::= 
	  ( 
	    "string" ("(" integer ")")? 
            | ( "integer" | "double" ) ( "threads" "sum" ) ?
	    | "file"
	  )
	  ( identifier | identfier ":=" concatenation ) 
	  ( ',' ( identifier | identfier ":=" concatenation ) ) *

sqldeclaration ::= "sql" identifier 
	staticsqltext ? 
	(sqlspecification ";")* "end" ( "sql" | identifier ) ?

staticsqltext ::=
	( ( SQLtext ";" 
	  | ( SQLtext | PLSQLblock ) newline whitespace ( "/" | "." )
	  ) newline ) 
	| ( "file" concatenation ";" )

sqlspecification ::= 
        ("bind"|"bindout") ( (string|integer) identifier ) ("," (string|integer) identifier)*
        | "define" ( integer identifier ) ( "," integer identifier)*
        | "array" "define" ? immediateexpression
        | "ignoreerror" | "cursorcache" | "nocursorcache"

lobdeclaration ::=
	"clob" identifier ( "," identifier ) *

compoundstatement ::= ( ifstatement
	| whilestatement
	| forloop
	| executionblock
	| controlloop )

ifstatement ::= "if" expression "then" statementlist 
        ( "else" statementlist ) ? "end" "if" ?

whilestatement ::= "while" expression "execute" statementlist "end" "while" ?

forloop ::= "for" 
        ( identifier ":=" expression ".." expression
	| identifier atclause ? ("and" expression) ?
	| "readline" identifier ( "," identifier ) + ("and" expression) ?
	)
	"loop" statementlist "end" "loop" ?

executionblock ::= "execute" atclause ? statementlist "end" "execute" ?

controlloop ::= "loop" ( controloption ) + ";" statementlist "end" "loop" ?

controloption ::= "count" expression
        | "start" expression
        | "stop" expression
        | ( "queue" | "noqueue" ) ? "every" expression
        | "wait" expression

/*atclause ::= "at" identifier ( "shardkey" '(' ( identifier ( ',' identifier ) * ':' ) ? identifier ( ',' identifier ) * ')' ) ?*/

atclause ::= "at" ( identifier | "default" ) 

declaration ::= ( databasedeclaration 
		| proceduredeclaration 
                | functiondeclaration
                | randomproceduredeclaration 
                | randomstringdeclaration
		) 

databasedeclaration ::= "database" identifier
        ( "connect" stringexpression
        | "username" stringexpression
        | "password" stringexpression
        | "default"
        | "results"
        | "drcp"
        | "reconnect" 
        | "threads" ? "dedicated" ( ( "requestmark" | "statemark" ) + ) ?
        | "cursorcache" immediateexpression
	| sessionpool
	) +

sessionpool ::= 
        "sessionpool" (immediateexpression "..")? immediateexpression
	("release" immediateexpression) ?
        
proceduredeclaration ::= "private" ? "procedure" identifier "(" argumentlist ? ")" ("statistics"|"nostatistics")? ( "is" ) ? statementlist "end" ( "procedure" | identifier ) ?

functiondeclaration ::= "private" ? "function" identifier "(" argumentlist ? ")" "return" simpledatatype ( "is" ) ? statementlist "end" ( "function" | identifier ) ?

argumentlist ::= argument ( "," argument ) *

argument ::= simpledatatype identifier

simpledatatype ::= ( "string" ( "(" integer ")" )? | "integer" | "double")

randomproceduredeclaration ::= "private" ? "random" "procedure" "array" identifier 
        "(" ( identifier immediateexpression ) ( "," identifier immediateexpression )* ")"            

randomstringdeclaration ::= "private" ? "random" "string" "array" identifier 
        "(" ( string immediateexpression ) ( "," string immediateexpression )* ")"

databasestatement ::= "commit" | "rollback" | "ociping"
	| "release" "database"
        | "writelob" identifier "," concatenation
        | "readlob" identifier "," identifier

sqlstatement ::= "modify" "sql" identifier 
	   ( "cursorcache" | "nocursorcache" | "ignoreerror"
	   /* | "array" expression NOT DOCUMENTED */
	   | modifydynamicsql
	   ) 

modifydynamicsql ::= 
        "for" concatenation
        | ("bind"|"bindout"|"define") ( expression identifier ) ("," expression identifier)*
        | "array" expression
	| "release"


filestatement ::= 
          ( "print" | ( "write" identifier "," ) ) concatenation ( "," concatenation ) *
        | "printline" ( concatenation ( "," concatenation ) * ) ?
        | ( "writeline" identifier ) ( "," concatenation ( "," concatenation ) * ) ?
	| "readline" identifier ( "," identifier ) +
        | "fflush" identifier 

regexsearch ::=
	"regex" concatenation "," concatenation ("," identifier ) +

regexsubstitute ::=
	( "regexsub" | "regexsubg" )
	  concatenation "," concatenation "," concatenation "," identifier


primary_expression ::= identifier
        | constant
        | function
        | ( "(" concatenation ")" ) 

function ::= "uniform" '(' expression ',' expression ')'
        | ( "erlang" | "erlang2" ) '(' expression ')'
        | "erlangk" '(' expression ',' expression ')'
        | ("sqrt"|"round") '(' expression ')'
        | ( "exp" | "log" ) '(' (expression ',') ? expression ')'
        | "lengthb" '(' concatenation ')'
        | "instrb" '(' concatenation ',' concatenation  ( ',' expression ) ? ')'
	| "substrb" '(' concatenation ',' expression ( ',' expression ) ? ')'
	| "sql_id" '(' identifier ')'
	| ( "activesessioncount" | "opensessioncount" | "serverrelease" ) '(' identifier ')'
	| "getenv" '(' expression ')'
	| "system" '(' concatenation ( ',' identifier ) ? ')'
	| "access" '(' concatenation ',' expression ')'
        | identifier '(' ( expression ( ',' expression ) * ) ? ')'

unary_expression ::= primary_expression ('is' ('not')? 'null')? | ('-' | '!' | 'not' ) multiplication

multiplication ::=
        unary_expression 
        | multiplication ('*' | '/' |'%' ) unary_expression 

addition ::= 
        multiplication
        | addition ('+'|'-') multiplication 

comparison ::= 
        addition
        | comparison ('<' | '>' | '<=' | '>=' ) addition 
        | comparison 'between' addition 'and' addition 

equality ::=
        comparison
        | equality ('=' | '!=' | '<>' ) comparison

logicaland ::=
        equality
        | logicaland 'and' equality 

logicalor ::=
        logicaland
        | logicalor 'or' logicaland

conditional ::=
        logicalor
        | logicalor '?' conditional ':' conditional


expression ::=
        conditional
        | expression '||' conditional

concatenation ::=
	expression + 

immediateexpression ::= expression

stringexpression ::= expression

threadexecution ::= "run" ( thread )+ "end" "run" ? 

thread ::=
        "threads" immediateexpression atclause ? statementlist "end" "threads" ? ";"

comment ::= "#" commenttext newline

identifier ::= ( [a-zA-Z] [a-zA-Z0-9_]* | '$' [0-9]+ )

integer ::= [0-9]+

constant ::=  [0-9]+ | [0-9]+ "." [0-9]* | string | "null"

string ::= '"' [^"]* '"' | '$' [A-Z] [A-Za-z0-9] *

whitespace ::= ( blank | tab ) *
