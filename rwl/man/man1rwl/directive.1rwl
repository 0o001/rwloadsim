.TH directive "1rwl" "September 2020" "RWP*Load Simulator" "Program Syntax"
.SH NAME
directives \- RWP*Load Simulator directives
.SH SYNOPSIS
.B $directive:value
.SH DESCRIPTION
Directives are read while scanning the input files to rwloadsim
and most are used to modify the behavior during parsing and code generation.
They are expressly
.I not
executed and are as such not provided to the rwloadsim language parser.
.P
All directives are initiated by \fB$\fR and a sequence of lower case letters,
and most then have \fB:\fR and another sequence of non-whitespace characters
that are the directive value.  
This page documents all ordinary directives.
.P
Some directives differ slightly in syntax are are documented in these separate pages:
For conditional compilation using
.B $if $then $else $endif
see conditional(1rwl).
For include file processing using
.B $include
see include(1rwl).
For option handling see either useroption(1rwl).
.P
.SH "DIRECTIVES"
.B $iformat:%<format>
.RS 4
This directive sets the printf format used whenever an integer is converted to a string;
the default value is "%ld".
Only formats that actually can be used to convert integers are accepted,
and a warning will be displayed if the conversion isn't valid for a (small)
set of verification values.
.P
Some useful values may be: 
.B $iformat:%08ld
which makes the string representation of integers have up to 8 leading zeros.
The directive
.B $iformat:%20ld
will cause the string representation of integers to have 20 characters.
.P
The size of the internal buffer used to store the string
representation of an integer is at least 30 characters,
and rwloadsim ensures the buffer is not written beyond its size.
.P
Note that in the following code snippet: 
.P
.nf
integer x := 123;
$iformat:%08ld
printline x;
.fi
.P
the output will be '123' and not '00000123'.
The reason is that the string representation of the integer x
is generated when the value 123 is assigned to it,
which is before the $iformat directive.
If you want the directive to be effective in this case,
you need to include it before the assignment: 
.P
.nf
$iformat:%08d
integer x := 123;
printline x;
.fi
.RE
.PP
.B $dformat:%<format> 
.RS 4
This is similar to $iformat, except it is used when the string representation
of double variables is needed; similar restrictions apply.
The default dformat is %.2f, and the same minimum 30 characters buffers is used.
As an example use
.B $dformat:%.6f
to cause string representation of doubles to have 6 digits after the decimal point.
.RE
.PP
.B $randseed:<hexdigits> 
.RS 4
The random number generator is normally provided a seed from /dev/urandom,
such that different executions of rwloadsim generates different random values.
If you want repeatable results, you can use this directive;
the argument is any sequence of hexadecimal digits (0-9, a-f, A-F);
up to twelve of these are used as the unsigned short entries in
the xsubi[] array used by erand48(3) and nrand48(3).
The random numbers in threads will also be repeatable as they are
generated by a thread-specific permutation of bits in the xsubi[] array.
You can optionally put 0x or 0X in front of the up to twelve hexadecimal digits. 
.RE
.PP
.B $startseconds:<double>
.br
.B $clockstart:<double>
.RS 4
These directive serves the same purpose as the
.B -c
option and they set
the common start time as a number of seconds after starting rwloadsim.
The directive must be used before the results database is declared.
The two directives have identical behavior; the reason for having both 
is that the rwloadsim developer was using both of the two terms in various circumstances.
.RE
.PP
.B $debugon:<hexdigits>
.br
.B $debugoff:<hexdigits> 
.RS 4
The debugon directive has the same effect as using the
.B -D
option to the rwloadsim executable;
debugoff reverses it.
Both of these take a string of hexadecimal digits as argument;
0x or 0X in front of them is optional. 
.RE
.P
.B $mute:<integer> 
.RS 4
This directive will mute the rwl error with the number provided. 
.RE
.P
.B $oraerror:stop
.br
.B $oraerror:continue 
.RS 4
The first of these tells rwloadsim to stop as soon as SQL execution gives any ORA- error.
Note that doing so can imply more errors during the actual program termination. 
The second tells rwloadsim to continue when ORA- errors are found during SQL execution.
This is the default. 
.RE
.P
.B $ora01013:continue
.br
.B $ora01013:stop 
.RS 4
Normally, ctrl-c leads to a controlled stop of the executing rwloadsim process
although the exact details of how clean-up is done cannot by guaranteed.
If you want rwloadsim to continue after receiving an ORA-01013, use the first
directive.
The second, which is the default, undoes this.
.RE
.P
.B $bindoffset:0 
.RS 4
Change bind by position offset to start at zero;
this is primarily useful if you are running with event 10046 tracing
where bind value dumping starts at #0.
With this directive set, the bind position actually used with the OCIBindByPos
call is one larger than the position set at bind or bindout.
The effect of the directive can be reversed by using
.B $bindoffset:1
which is the default.
Note that this directive has no impact on the numbering of select list elements used with define. 
.RE
.P
.B $maxcode:N
.br
.B $maxident:N
.br
.B $readbuffer:N
.RS 4
These set the maximum size of the code, the maximum number of identifiers,
or the size of the buffer used to read lines of text using
.B readline
respectively.
They serve the same purpose as the \fB-I\fR, \fB-C\fR and \fB-B\fR options
and can be used in startup files or using the
.B $longoption
directive in the first file named with a .rwl suffix.
.RE
.P
.B $statistics:basic
.br
.B $statistics:histograms
.br
.B $statistics:all 
.RS 4
These have the same purpose as the \fB-s\fR, \fB-ss\fR, and \fB-sss\fR options respectively.
They need to be used before the repository database is declared. 
.RE
.P
.B $setaction:on
.br
.B $setaction:reset
.br
.B $setaction:off
.RS 4
The $setaction directives control setting the action (in v$session.action).
When on, the action is set to the procedure name when a database session
is acquired from a pool or a dedicated connection is being used;
the action name is set using the OCI_ATTR_ACTION attribute of the
session and is therefore sent to the database during the first coming actual round trip.
When reset is specified, the action name is reset when the session
is released or a dedicated connection no longer is in use;
using reset implies an extra otherwise unnecessary round trip to the database.  
.P
You can get the same behavior using the
.B -S
option to rwloadsim.
.RE
.P
.B $oerstatistics:on
.br
.B $oerstatistics:off
.br
.B $oerstatistics:N
.RS 4
These directives controls saving of ORA- error statistics similar to the
.B --oer-statistics
option.
They can be used to turn saving of error statistics on and off or
to set the maximum number of errors saved (per thread); the default is 50.
.RE
.P
.B $queue:on
.br
.B $queue:off
.RS 4
These have the same effect as the
.B -Q
and
.B -N
options;
the default is that queuing simulation using a backlog is off.
.RE
.P
.B $errortime:on
.br
.B $errortime:off
.RS 4
The first of these has the same effect as the
.B -W
option, i.e. to augment
all execution time errors with a timestamp measured as the number of seconds since clock start.
It is primarily used as a debugging tool if the exact time of errors is needed.
The second directive turns this off.
.RE
.P
.B $nameexpand:off
.br
.B $nameexpand:on
.RS 4
The former of these has the same effect as the
.B --no-nameexpand
option;
the latter turns file name expansion using environment variable on.
.RE
.P
.B $eventnotify:on
.br
.B $eventnotify:off
.RS 4
The former has the same effect as the
.B --event-notify
option; the latter undoes
.B --event-notify
if found on the command line.
These are only available in the startup file or via $longoption
directive in the first file named with a .rwl suffix.
.RE
.P
.B $useroption:name
.br
.B $userswitch:name
.br
.B $longoption:option[=value]
.RS 4
Refer to useroption(1rwl).
.P
You can get the same behavior using the
.B -S
option to rwloadsim.
.RE
.SH COPYRIGHT
Copyright \(co 2020 Oracle Corporation
.PP
Licensed under the Universal Permissive License v 1.0
as shown at https://oss.oracle.com/licenses/upl
.SH "SEE ALSO"
rwloadsim(1rwl), useroption(1rwl), include(1rwl), conditional(1rwl)
