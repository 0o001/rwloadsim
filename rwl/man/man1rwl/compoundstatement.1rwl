.TH compoundstatement "1rwl" "September 2020" "RWP*Load Simulator" "Program Syntax"
.SH NAME
compoundstatement \- RWP*Load Simulator compound statements
.SH SYNTAX
.nf
compoundstatement ::= 
  ifstatement
| whilestatement
| forloop
| cursorloop
| readloop
| executionblock
| controlloop

ifstatement ::=
  \fBif\fR expression \fBthen\fR
    statementlist
    [ \fBelse\fR statementlist ]
  \fBend\fR [ \fBif\fR ]

whilestatement ::=
  \fBwhile\fR expression \fBexecute\fR
    statementlist
  \fBend\fR [ \fBwhile\fR ]

forloop ::=
  \fBfor\fR identifier \fB:=\fR expression \fB..\fR expression
  \fBloop\fR
    statementlist
  \fBend\fR [ \fBloop\fR ]

cursorloop ::=
  \fBfor\fR identifier [ atclause ] [ \fBand\fR expression ]
  \fBloop\fR
    statementlist
  \fBend\fR [ \fBloop\fR ]

readloop ::=
  \fBfor\fR \fBreadline\fR identifier \fB,\fR identifier { \fB,\fR identifier } [ \fBand\fR expression ]
  \fBloop\fR
    statementlist
  \fBend\fR [ \fBloop\fR ]

executionblock ::=
  \fBexecute\fR [ atclause ]
    statementlist
  \fBend\fR [ \fBexecute\fR ]

.fi
.SH DESCRIPTION
Compound statements are used to wrap statement list typically for conditional or repeated execution.
The control loop is described separately, the rest are described here.
.PP
\fBif\fR e \fBthen\fR s;s;s \fBelse\fR s;s;s \fBend\fR 
.RS 4
The expression, e, between \fBif\fR and \fBthen\fR is evaluated and if it non-zero,
the statements after \fBthen\fR are executed.
Otherwise, the statements between \fBelse\fR and \fBend\fR are executed.
The second part is optional.
If the expression is null,
a warning is shown and the statement list after \fBthen\fR will not be executed.
.RE
.PP
\fBwhile\fR e \fBexecute\fR s;s;s; \fBend\fR
.RS 4
Execute the statements between the 
.B execute
and 
.B end
keywords while the expression, e, is true (non-zero).
If the expression is zero when the while loop is entered, no execution of the statement list
takes place.
.RE
.PP
\fBfor\fR v \fB:=\fR lo \fB..\fR hi \fBloop\fR s;s;s; \fBend\fR
.RS 4
The named variable, v, loops through the values of the expressions, lo and hi,
and the statement list between \fBloop\fR and \fBend\fR is executed once with each value.
The increment after each loop is one and it is recommended that the variable is of type 
integer.
If the value lo is higher than the value hi, no statements are executed.
.RE
.PP
\fBfor\fR c \fBat\fR d \fBand\fR e \fBloop\fR s;s;s; \fBend\fR
.RS 4
The identifier c must refer to a SQL statement that is a query,
and the statement list between 
.B loop
and 
.B end
will be executed once for each row fetched from the query.
If no rows are returned, no execution will take place.
The optional at clause can be used to choose a particular database, d,
otherwise the currently chosen one will be used.
The optional 
.B and
followed by an expression e before the
.B loop
keyword
will cause the cursor to be cancelled when the expression is zero.
Note that due to array fetching,
some rows may have been fetched from the database but not yet processed when the condition after
.B and
becomes false.
.RE
.PP
\fBfor readline\fR f\fB, \fRv1\fB,\fR v2 \fBand\fR e \fBloop\fR s;s;s; \fBend\fR
.RS 4
The readloop reads 
.I lines
from a file and writes them into variables.
The first identifier, f, must be a variable of type file that is open for read.
The semantics of the readline loop is somewhat similar to the semantics of doing something like
.B while read ... ; do 
in the shell.
If there is only one variable, v1, in addition to the file variable, that variable must be of type
string and the full line read from the file (excluding the terminating newline)
will be saved in that variable.
.P
If there are multiple variables, v1, v2, ... they can be of type integer, double or string.
In that case, it is assumed that each line of the file contains whitespace separated tokens.
The first of these will be saved in the first variable, v1,
the second in the second variable, v2, etc.
If there are more tokens in the line read from the file than there are variables to save those into,
the last variable will contain the remaining part of the line.
If there are fewer tokens in the line read from the file than there are variables, the last ones
will be \fBnull\fR, even if they are of type string.
.P
If you need more complex processing of input lines, use the first form with only
one string variable to contain the whole line, which you subsequently process using \fBregex\fR.
.P
When end-of-file is reached, the loop terminates; you still need to excplicitly close the file.
.P
The optional \fBand\fR expression before the \fBloop\fR keyword,
causes reading to stop when the expression, e, is zero.
In that case, you can continue reading from the file.
.P
There is also a 
.B readline
statement that reads a single line from a file.
.P
Please see the notes for the readline statement about the buffer size used for reading.
.RE
.PP
\fBexecute at\fR d s;s;s; \fBend\fR
.RS 4
The primary purpose of the execute block is to handle a list of statements as one
in particular when dealing with database connections.
If you don't have a default database, you cannot execute any sql or database statement
without specifying the at clause and using the execute block allows you to 
just have a single at clause that will be used for the statement list wrapped within
the execute block.
The variable, d, must refer to a database and if any of the statements in the list need
a database (e.g. executing sql), the whole execute block will have a database session
upon start, that is released when finished.
.RE
.SH EXAMPLES
Still to come.
.SH COPYRIGHT
Copyright \(co 2020 Oracle Corporation
.br
Licensed under the Universal Permissive License v 1.0
as shown at https://oss.oracle.com/licenses/upl
.SH "SEE ALSO"
controlloop(1rwl), regexsearch(1rwl), regexsubstitute(1rwl), filestatement(1rwl),
sqlstatement(1rwl), atclause(1rwl), readline(1rwl)
expression(1rwl), concatenation(1rwl)
