# RWP*Load Simulator
#
# Copyright (c) 2022 Oracle Corporation
# Licensed under the Universal Permissive License v 1.0
# as shown at https://oss.oracle.com/licenses/upl/
#
# History
# bengsig  29-jun-2022 - Generate project
# bengsig  28-apr-2022 - Exit on connect error
# bengsig  25-apr-2022 - Add flush
# bengsig  05-may-2021 - Add timestamp
# bengsig         2018 - Creation
# 
# Execute something similar to "ping", but show both time to make 
# a connection and to execute both ociping and select 1 from dual
#
# You need to specify a default database using -l
#
# rwloadsim -l scott/{password}@//host/service connping.rwl
#
# It runs by default 1 minute with by default 1 second between each connect
# but you can change these values.
#
# For e.g. 20 seconds with 0.5 seconds between each connect
#
# rwloadsim -X 1 --period=20 --interval=0.5 -l scott/{password}
#
# If you leave out either of '--period' or '--interval'
# you will get the defaults of 60 and 1.

# Make it use reconnect
$longoption:default-reconnect

# Ignore warning about ignoring error
$mute:73 # RWL-073: warning at [demo/connping.rwl;21]: muting non-warning 22
# and ignore the division by zero error
$mute:22 # RWL-022: error at [demo/connping.rwl;109]: attempted division by zero

# The following comes from 'release database' below
$mute:290 # RWL-290: warning: a sensitive keyword was found during scanning

# Ignore warning about compile/runtime mismatch
$alwaysmute:206 # RWL-206: warning: OCI compile environment (19.15) is different from runtime (21.6)

# If we didn't connect, don't do anything
$if not defined(default database) $then
  writeline stderr, "Missing or incorrect -l option; use -h to get help";
  exit 1;
$endif

double dd, d, d0, t0, t2;
double threads sum tsum := 0.0, tsq := 0.0, tcnt := 0.0;
double threads sum t0sum := 0.0, t0sq := 0.0, t0cnt := 0.0;
double threads sum tdsum := 0.0, tdsq := 0.0, tdcnt := 0.0;

double period := 60;
double interval := 1.0;
integer timestamp := 1;
integer flush_output := 0;
integer flush_csv := 0;
string(2048) csvoutput;
   $userswitch:flush-csv:"--flush-csv      : flush the csvfile after each line"
   $useroption:csvoutput:"--csvoutput=file : write pure csv to the named file"
$userswitch:flush-output:"--flush-output   : flush stdout after each line"
   $userswitch:timestamp:"--no-timestamp   : do not include the timestamps"
    $useroption:interval:"--interval=N     : interval between each connect/ping, default 1"
      $useroption:period:"--period=N       : time in seconds run; default 60"
               $userhelp:"connping - Connect and run OCIPing()"
               $userhelp:"This utility will repetedly establish a new database connection"
               $userhelp:"and use it to perform an OCIPing() and a simple query."
               $userhelp:"The time to establish connection, do OCIPing and query is output."
	       $userhelp:"-l u/p@c         : compulsory option providing database credentials"


file csvfile;

if csvoutput != "" then
  csvfile := csvoutput;
  if timestamp then
    writeline csvfile,"# CONN OCI DUAL SID INST TIME";
  else
    writeline csvfile,"# CONN OCI DUAL SID INST";
  end if;
end if;

$clockstart:2

integer firsttime := 1;

# The procedure oneping will get a session
# from the pool and then execute ociping
# we time both and calculate the sum, etc
procedure oneping()
  integer one, sid, inst;

  # Just to show some information to the user
  # Note that this query in itself is not timed
  sql selsidinst
    select sys_context('USERENV','SID')
    , sys_context('USERENV','INSTANCE') 
    from dual;
    define 1 sid, 2 inst;
  end;

  sql sel1dual
    select 1 from dual;
    define 1 one;
  end;

  # In first call, there will be a session in the pool
  # because we haven't done release database yet.
  # The first call therefore just does release database
  if ! firsttime then
    # We have now acquired the session, so see how long that took
    d0 := 1000.0 *(runseconds-t0);
    # Sum etc of connect times
    t0cnt += 1.0;
    t0sum += d0;
    t0sq += d0*d0;
    selsidinst; # Get session information

    ociping; # To make sure everything is in whatever caches
    # And now really measure ociping
    t2 := runseconds;
    ociping;
    d := 1000.0 * (runseconds-t2);
    # Sum etc of ociping times
    tsum += d;
    tsq += d*d;
    tcnt += 1.0;

    # Now do the same with select 1 from dual
    sel1dual; # To make sure everything is in whatever caches
    # And now really measure sel1dual
    t2 := runseconds;
    sel1dual;
    dd := 1000.0 * (runseconds-t2);
    # Sum etc of ociping times
    tdsum += dd;
    tdsq += dd*dd;

    tdcnt += 1.0;
    # Print a line to the user
    if csvoutput != "" then
      if timestamp then
	fprintf csvfile, "%.3f %.3f %.3f %d %d %.2f\n", d0, d, dd, sid, inst, t2;
      else
	fprintf csvfile, "%.3f %.3f %.3f %d %d\n", d0, d, dd, sid, inst;
      end if;
      if flush_csv then
        fflush csvfile;
      end if;
    end if;
    if timestamp then
      printf "connect:%.2f ms, ociping:%.3f ms, dualping:%.3f ms, sid=%d, inst#=%d, time=%.1f\n"
        , d0, d, dd, sid, inst, t2;
    else
      printf "connect:%.2f ms, ociping:%.3f ms, dualping:%.3f ms, sid=%d, inst#=%d\n"
        , d0, d, dd, sid, inst;
    end if;
      if flush_output then
        fflush stdout;
      end if;
  end if;
  firsttime := 0;
  release database;
end oneping;

run 
  threads 1 
    for every interval stop period loop
      # Save time before call to oneping, i.e. time
      # just before we acquire the session
      t0 := runseconds;
      oneping();
    end loop;
  end threads;
end run;

# Print final results 
if csvoutput != "" then
  csvfile := null;
end if;

printf "connect mean=%.2f, stddev=%.2f\n", t0sum/t0cnt, sqrt((t0sq-t0sum*t0sum/t0cnt)/t0cnt);
printf "ociping mean=%.2f, stddev=%.2f\n", tsum/tcnt, sqrt((tsq-tsum*tsum/tcnt)/tcnt);
printf "dualping mean=%.2f, stddev=%.2f\n", tdsum/tdcnt, sqrt((tdsq-tdsum*tdsum/tdcnt)/tdcnt);
    
