# RWP*Load Simulator
#
# Copyright (c) 2022 Oracle Corporation
# Licensed under the Universal Permissive License v 1.0
# as shown at https://oss.oracle.com/licenses/upl/
#
# History
# bengsig  29-jun-2022 - Generate project
# bengsig  28-apr-2022 - Exit on connect error
# bengsig  25-apr-2022 - Add flush
# bengsig  04-may-2021 - Creation
# 
# Execute something similar to "ping", showing the time
# to do ociping 
#
# You need to specify a default database using -l
#
# rwloadsim -ul scott/{password}@//host/service ociping.rwl
#
# It runs by default 1 minute with by default 1 second between
# ociping but you can change these values.
#
# For e.g. 20 seconds with 0.5 seconds between each connect
#
# rwloadsim --period=20 --interval=0.5 -ul scott/{password}
#
# If you leave out either of '--period' or '--interval'
# you will get the defaults of 60 and 1.
#
# Each line of output contains a timestamps in seconds and the
# time to do the ociping. Use --no-timestamp to omit the former

# If we didn't connect, don't do anything
$if not defined(default database) $then
  writeline stderr, "Missing or incorrect -l option; use -h to get help";
  exit 1;
$endif

# Ignore warning about ignoring error
$mute:73 # RWL-073: warning at [demo/connping.rwl;21]: muting non-warning 22
# and ignore the division by zero error
$mute:22 # RWL-022: error at [demo/connping.rwl;109]: attempted division by zero

# Ignore warning about compile/runtime mismatch
$alwaysmute:206 # RWL-206: warning: OCI compile environment (19.15) is different from runtime (21.6)

private double d, t1, t2;
private double tsum := 0.0, tsq := 0.0, tcnt := 0.0;

double period := 60;
double interval := 1.0;
integer timestamp := 1;
integer flush_output := 0;
integer flush_csv := 0;
string(2048) csvoutput;
$userswitch:flush-output:"--flush-output   : flush stdout after each line"
   $userswitch:flush-csv:"--flush-csv      : flush the csvfile after each line"
   $useroption:csvoutput:"--csvoutput=file : write pure csv to the named file"
   $userswitch:timestamp:"--no-timestamp   : do not include timestamps"
      $useroption:period:"--period=N       : time in seconds to run ping; default 60"
    $useroption:interval:"--interval=N     : interval between pings, default 1"
               $userhelp:"ociping - run OCIPing()"
               $userhelp:"This utility will create a database connection and run OCIPing()"
               $userhelp:"for some time reporting the roundtrip time to the database."
               $userhelp:"-l u/p@c         : compulsory option providing database credentials"

file csvfile;

if csvoutput != "" then
  csvfile := csvoutput;
  if timestamp then
    writeline csvfile,"# PING TIME";
  else
    writeline csvfile,"# PING";
  end if;
end if;

$clockstart:2

integer firsttime := 1;

# The procedure oneping will get a session
# from the pool and then execute ociping
# we time both and calculate the sum, etc
private procedure oneping()

  # In first call, there will be a session in the pool
  # because we haven't done release database yet.
  # The first call therefore just does release database

  ociping; # To make sure everything is in whatever caches
  # And now really measure ociping
  t1 := runseconds;
  ociping;
  t2 := runseconds;
  d := 1000.0 * (t2-t1);
  # Sum etc of ociping times
  tsum += d;
  tsq += d*d;
  tcnt += 1.0;

  if csvoutput != "" then
    if timestamp then
      fprintf csvfile, "%.3f %.2f\n", d, t1;
    else
      fprintf csvfile, "%.3f\n", d;
    end if;
    if flush_csv then
      fflush csvfile;
    end if;
  end if;
  if timestamp then
    printf "%.3f %.1f\n", d, t1;
  else
    printf "%.3f\n" , d;
  end if;
  if flush_output then
    fflush stdout;
  end if;
end oneping;

for queue every interval stop period loop
  oneping();
end loop;

# Print final results 
if csvoutput != "" then
  csvfile := null;
end if;
printf "ociping mean=%.3f stddev=%.3f\n",tsum/tcnt,sqrt((tsq-tsum*tsum/tcnt)/tcnt);
    
