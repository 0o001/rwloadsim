# Implement collection of ash data at the end of a run

# Copyright (c) 2021 Oracle Corporation
# Licensed under the Universal Permissive License v 1.0
# as shown at https://oss.oracle.com/licenses/upl/

# This is the first step that is done from runsys.rwl.
# We do little more than finding the six top ash
# events, save those in the rwloadsim schema
# and prepare the SQL that really does the
# ash collection.
#
# The second step is called separately after run
# completion and will copy the ash data to the repository
# based on the queries generated here in step one.
#
# Note that the ashdata table that will be filled in
# step2 doens't have information about WHICH events
# are included, it only has columns named E1 until E6.
# The mapping of E1 .. E6 to event names is saved
# in the rwlash table that we insert into here
# and later use in csvdata.rwl to create the final
# gnuplot line


private file yt;

procedure ashstep1(string starttime) nostatistics

  string event;
  integer ecount;

  sql evgroup 
    select 
    event, count(*)
    from gv$active_session_history
    where user_id > 0
    and sample_time_utc >= to_timestamp(:1,'YYYY.MM.DD"T"HH24:MI:SS')
    and event is not null
    group by event
    order by count(*) desc
    /
    bind 1 starttime;
    define 1 event, 2 ecount;
    array 100;
  end;

  integer enum;

  sql insevname
    insert into rwlash
    ( runnumber
    , enum
    , ename
    ) values (:1,:2,:3);
    bind 1 runnumber, 2 enum, 3 event;
    array 6;
  end;

  printline "doing ash from", starttime;
  # create the query that gives us the pivot'ed data
  # and write it to the .rws file
  yt := resultsdir || subdir || runnumber || "/getash.rws";
  writeline yt "select (sample_time_utc - to_date('"||starttime||"','YYYY.MM.DD\"T\"HH24:MI:SS'))*86400";
  writeline yt ", nvl( CPU,0)";
  writeline yt ", nvl( E1,0)";
  writeline yt ", nvl( E2,0)";
  writeline yt ", nvl( E3,0)";
  writeline yt ", nvl( E4,0)";
  writeline yt ", nvl( E5,0)";
  writeline yt ", nvl( E6,0)";
  writeline yt ", nvl( OTHER,0)";
  writeline yt "from (";
  writeline yt "select sample_time_utc,CPU,E1,E2,E3,E4,E5,E6,OTHER";
  writeline yt "from (";
  writeline yt "select sample_time_utc";
  writeline yt ", event";
  writeline yt ", count(*) ecount";
  writeline yt "from";
  writeline yt "(";
  writeline yt "select cast(sample_time_utc as date) sample_time_utc";
  writeline yt ", decode(event";
  enum := 1;
  # stop after the top 6 events by count
  for evgroup at systemdb and enum <= 6 loop
    writeline yt ", '"||event||"', 'E"||enum||"'";
    insevname;
    enum += 1;
  end loop;
  writeline yt ", NULL, 'CPU'";
  writeline yt ", 'OTHER'";
  writeline yt ") event";
  writeline yt "from gv$active_session_history";
  writeline yt "where user_id > 0";
  writeline yt "  and sample_time_utc >= to_timestamp('"||starttime||"','YYYY.MM.DD\"T\"HH24:MI:SS')";
  writeline yt ")";
  writeline yt "group by sample_time_utc";
  writeline yt ", event";
  writeline yt ")";
  writeline yt "pivot";
  writeline yt "( sum(ecount) for event in ";
  writeline yt "( 'E1' as E1";
  writeline yt ", 'E2' as E2";
  writeline yt ", 'E3' as E3";
  writeline yt ", 'E4' as E4";
  writeline yt ", 'E5' as E5";
  writeline yt ", 'E6' as E6";
  writeline yt ", 'CPU' as CPU";
  writeline yt ", 'OTHER'as OTHER";
  writeline yt ")))";
  writeline yt "order by sample_time_utc";

  yt := null;
  commit;

end ashstep1;
