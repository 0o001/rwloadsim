# Copyright (c) 2021 Oracle Corporation
# Licensed under the Universal Permissive License v 1.0
# as shown at https://oss.oracle.com/licenses/upl/

# bengsig  21-mar-2023 - Connection pool
# bengsig  14-mar-2023 - Add divisors/multipliers
# bengsig   9-mar-2023 - Some xc in ordinary
# bengsig  15-feb-2023 - Add activity burst
# bengsig   9-feb-2023 - Explain no pool delay unless pool
# bengsig  15-nov-2022 - Add rategradient
# bengsig  25-oct-2022 - External control
# bengsig         2019 - Creation

# declare all parameters

$if $RWLOLTP_NAME = "" $then
  writeline stderr, "You do not have the environment RWLOLTP_NAME set";
  exit 1;
$endif

string key_to_show;

$errortime:on

# Controls rate of transactions.  0.1 uses about 1 CPU seconds per second
# per process on a 2GHz CPU.  Higher values means proportionally higher load
double ratefactor := 0.2;

double rategradient;
# NULL or 0, same rate through whole run
# otherwise multiply ratefactor by 1+gradient*(runseconds()-runperiod/2)/(runperiod/2)

# How many seconds rampump between worker threads
double rampfactor := 0.1;

# These should normally be fine but can be 
# reduced on small hardware or increased on
# powerfull hardware
integer rwl_min_pool := 3;
integer rwl_max_pool := 10;
double rwl_pool_release := 5.0;

# Reduce if you want more parsing, increase if you want less
integer cursor_cache_size := 40;

# Set the rampup time in the oltpcore script, normally 0.5 is fine
double script_ramp := 0.5;

# These are modified in multi process runs
# by the shell script oltprun - leave the default values here
integer procnumber:=1;
integer proccount:=1;

# Various settings used by oltpforever and oltpforever2
# number of processes (per side, so double if you also run oltpforever2)
integer forever_proccount:=1;
# Heading to be put on top of the daily reports
string rwl_heading := "No overall heading has been set by user";
# Name of file that will contain links to all the daily reports
string rwl_daily_html := "daily.html";

# The pool size of batch runs should be sufficient for
# all those that we run as batches such that there effectively
# never is a wait for a session.
#
# It is actually used by those known to take long, 
# typically around 1s
integer rwl_min_batch := 0;
integer rwl_max_batch := 2;

integer threadcount := 50; # This is the number of worker threads

integer dontdolong := 0; # Set this if you want to avoid the very long running queries that risk ORA-1555

integer simulatebatch := 0;	# If set to a positive value, run in batch simulate mode
				# Set via -b option to oltpcore/oltprun

double query_factor := 1.0;
# You can change the mix between the 
# different "transactions"
# but keep the sum somewhere around 100-150
double makeorder_weight := 15.0; # create orders, i.e. DML and query
double queryorder_weight := 45.0; # simple query
double searchproduct_weight := 2.0; # pure query with scans
double makeinvoices_weight := 0.0; # make invoices, quite heavy, now only done in batch
double complex_query_weight := 1.5; # complex query with cpu usage
double stockup_weight := 0.2; # quite heavy DML, also done as batch
double aw_transaction_weight := 40.0; # Artificial transaction
double awindex_query_weight := 50.0; # Aritificial query likely to use I/O
# The next has a high impact on TX contention in particular
# in multi process runs, so the value should be quite low, 
# e.g. 0.05
double shiporder_weight := 0.05;

$setaction:on

# These values define the size of the tables
# not being inserted into
integer max_warehouse := 10;
integer max_product := 10000;
integer max_customer := 1000;

# Change these if you want quick test runs
# or longer runs.  Note that oltprun
# overrides the runperiod
integer runperiod := 120; # runtime in seconds

# set number of hash (sub)partitions in orders and order_items
integer orders_hashcount := 8;

# set limit for orders to look back in query_order with runtype 1,4
# higher values means more I/O.  DO NOT make it larger than 15 million
# as this will impact the partition truncate
# There are 1000000 orders per partition and we truncate oldest
# when the partition count gets larger than 25.
integer query_order_max_limit := 5000000;

# How many time should we double the size of aw_cols table
# from its starting size of around Â¼ GB (256 MB)
# 2 -  1GB
# 4 -  4GB
# 6 - 16GB
integer aw_cols_256MB_doublings := 4; 

# How is the aw_cols tables accessed
# If null (the default), use uniform
# Otherwise, the higher the skew
# the smaller part of aw_cols will be read
# Some examples are in oltp.rwl
double aw_cols_skew;
# How many rows are read on average per query
double aw_cols_query_factor := 50;

# Set to 1 for some debug; not well implemented
integer testdebug := 0;
integer aw_verbose := 0;

# used to output changed values in multi-runs such as oltpscale
integer show_changed_values := 0;

# The CD transaction don't scale on RAC, so instance count is 
# needed
integer aw_instances := 0; # 0 means not RAC

# You can add a burst sometime into the run
# with higher arrival rate in the burst
double burst_start := 300; # when does burst start
double burst_length := 0;  # how long is it (zero means no burst)
double burst_factor := 2.0; # factor to increase arrival rate (1.0 means nothing)

# You can also add a burst in number of worker threads
integer wburst_count :=   0;   # default 0 means don't do it
double wburst_start := 360;   # when to start
double wburst_length := 10;   # length in seconds

# See the olrp.rwl file for details
integer aburst_workers; 
double aburst_pre_factor := 1.0; # factor for load before split
double aburst_post_factor := 1.0; # factor for load after split
double aburst_start := 120; # time when the workload changes

# And you can "delay" things by reducing the normal pool
# Note that this requires rwloadsim release 2.3.4 or later
double delay_length := 0;     # default 0 means don't do it
double delay_start := 0;      # start time pool reduction
integer delay_min_pool := 0;  # min reduced pool size
integer delay_max_pool := 1;  # max reduced pool size

integer doawr := 1; # set to 0 if you don't want awr to be generated 
# If you want awr generated for multipe instances
# set the next to be the name of a file that has 
# an instance number (and nothing else) per line
# NO WORKING DON'T DO THIS
string awrinstfile := "";

# The following are for svg gnuplotting

# You will get nicer ash by keeping this to non-zero
# but it implies up to 3MB extra per run in the awr directory
# so e.g. for a month, 30*48*3MB = 4.3GB
# To turn off the ash as svg, set to zero

integer largeashok := 1;

# For svg mouse events to work, first copy the contents
# of the gnuplot javascript directory, which typically
# is /usr/share/gnuplot/4.6/js to a subdirectory under
# the place your httpd serves file, typically /var/www/html.
# Then set the following variable to that location
# and svg plotting will include this option
# mouse jsdir '$gnuplotjs' 
# 
# As an example, in a standard Oracle Linux setup, as root, do this:
#
# cd /var/www/html
# mkdir -p usr/share/gnuplot/4.6/js
# cp /usr/share/gnuplot/4.6/js/* usr/share/gnuplot/4.6/js
#
# and you should be all set
string gnuplotjs := ""; # "/usr/share/gnuplot/4.6/js";
# 

# The interval in seconds between saving shared pool and buffer cache
# sizes
double pool_size_interval := 300;

# These are the ones that MUST be set by the user:

string awrdirectory := "/nowhere";
string resultsdir := "/nowhere";
string subdir := "/r"||runnumber/1000||"/";
string system_connect := "//machine/database";
string system_username := "nosystem";
string system_password := "nosystem";
string cruser_connect := "//machine/database";
string cruser_username := "NOTSET";
string cruser_password := "nosystem";
string sysawr_connect := ""; # These three get defaults from system_
string sysawr_username := "";
string sysawr_password := "";
string default_tablespace := "notablespace";
integer results_in_test := 1;
string rwloadsimdir := "/nowhere";
string results_connect := "//machine/database";
string results_username := "norwloadsim";
string results_password := "norwloadsim";
string normal_connect := "//machine/database";
string pool_type := "sessionpool";
string pool_connect := "//machine/database";
string batch_connect := "//machine/database";
string batch_type := "sessionpool";
string rwl_aw1_username := "RWLCD1";
string rwl_aw1_password := "RWLCD1";
string rwl_aw2_username := "RWLCD2";
string rwl_aw2_password := "RWLCD2";
string rwl_oe_username := "RWLOE";
string rwl_oe_password := "RWLOE";
string rwl_run1_username := "RWLRUN1";
string rwl_run1_password := "RWLRUN1";
string rwl_run2_username := "RWLRUN2";
string rwl_run2_password := "RWLRUN2";
string rwl_run_like := "RWLRUN_";
string rwl_title := "No title has been set by user";

# The following are used for anything related to
# external control
integer xc_enabled := 0;

double xc_refresh := 10.0; # how frequent we read these from oltpxc
double  threads global xc_ratefactor  := 1.0;   # load multiplier
double  threads global xc_loadfactor  := 1.0;   # proportion threads active
integer threads global xc_hardparse   := 0;     # do hard parse
integer threads global xc_minpool     := 3;     # pool minimum size
integer threads global xc_maxpool     := 10;    # pool maximum size
integer threads global xc_cursorcache := 40;    # size of cursor cache
double  threads global xc_cursorleak  := 0.0;   # chance of cursor leak
double  threads global xc_sessionleak := 0.0;   # chance of session leak
integer threads global xc_stopnow     := 0;     # run should stop
double  threads global xc_logoffrate  := 0.0;   # logoff rate
integer threads global xc_badplan     := 0;     # bad plan indicator
integer threads global xc_blockcontention := 0; # block contention indicator
integer xc_proccount := 1; # process count, can only be set at startup
integer xc_nopool := 0; # Set to 1 for dedicated rather than pool
double xc_sessionwait := 120; # seconds timeout waitit for a free session, 0 for no timeout

# Some also exist without external control
integer fix_hardparse := 0; # make hard parse, currently 0, 1 or 2
double fix_cursorleak;     # set the risk of leak cursor
double  fix_logoffrate;    # in the range [0;1]

# Here is a parameter we don't currently document
# If set to a value, erlang2(x) will be replaced by normaldistribution(1,normal_stddev)*(x)
# in the primary execution loop
double normal_stddev;

$include:"$RWLOLTP_NAME.rwl"

# These are too obscure to be documented
# but they can be used with -d on the oltprun/oltpcore command line
# to adjust the values found in {key}.rwl
# The reason for having both mulitpliers and divisors as that
# you typically want to apply some factor and its reciprocal
# to the ratefactor and the threadcount and doing floating
# point mathematics in bash is difficult.
double ratefactor_multiplier;
double threadcount_multiplier;
double ratefactor_divisor;
double threadcount_divisor;
if ratefactor_multiplier is not null then
  ratefactor := ratefactor * ratefactor_multiplier;
end if;
if threadcount_multiplier is not null then
  threadcount := round(threadcount * threadcount_multiplier);
  wburst_count := round(wburst_count * threadcount_multiplier);
  aburst_workers := round(aburst_workers * threadcount_multiplier);
end if;
if ratefactor_divisor is not null then
  ratefactor := ratefactor / ratefactor_divisor;
end if;
if threadcount_divisor is not null then
  threadcount := round(threadcount / threadcount_divisor);
  wburst_count := round(wburst_count / threadcount_divisor);
  aburst_workers := round(aburst_workers / threadcount_divisor);
end if;
# These are also rather obscure but can be used with -i
# to prevent some of the batch stuff
integer dontdo_batch1 := 0;
integer dontdo_batch2 := 0;
integer dontdo_batch3 := 0;
integer dontdo_batch4 := 0;

# gradient stuff
double halfperiod := runperiod / 2.0;
if rategradient is not null then
  if rategradient < 0.0 then
    rategradient := 0.0;
  end if;
  if rategradient > 1.0 then
    rategradient := 1.0;
  end if;
end if;
  

if sysawr_connect = "" then
  sysawr_connect := system_connect;
end if;
if sysawr_username = "" then
  sysawr_username := system_username;
end if;
if sysawr_password = "" then
  sysawr_password := system_password;
end if;

# make some sanity check
if pool_type != "dedicated" and pool_type != "sessionpool"
   and pool_type != "drcp" and pool_type != "connectionpool" then
  writeline stderr, "pool_type ("pool_type") must be dedicated, sessionpool, connectionpool or drcp";
  exit 1;
end if;

if batch_type != "dedicated" and batch_type != "sessionpool"
   and batch_type != "drcp" and batch_type != "connectionpool" then
  writeline stderr, "batch_type ("batch_type") must be dedicated, sessionpool, connectionpool or drcp";
  exit 1;
end if;

if simulatebatch then
  wburst_count := 0;
  delay_length := 0;
  burst_length := 0;
end if;

# correct potentially bad user choices

if query_order_max_limit > 15000000 then
  query_order_max_limit := 15000000;
end if;

# If use wants to modify the mix between query and DML, do it
if query_factor != 1.0 then
  double sqrt_query_factor := sqrt(query_factor);
  makeorder_weight 	:= makeorder_weight  	/ sqrt_query_factor; 
  queryorder_weight 	:= queryorder_weight  	* sqrt_query_factor; 
  searchproduct_weight 	:= searchproduct_weight * sqrt_query_factor; 
  makeinvoices_weight 	:= makeinvoices_weight  / sqrt_query_factor; 
  complex_query_weight 	:= complex_query_weight * sqrt_query_factor; 
  stockup_weight 	:= stockup_weight 	/ sqrt_query_factor; 
  aw_transaction_weight := aw_transaction_weight/ sqrt_query_factor; 
  awindex_query_weight  := awindex_query_weight * sqrt_query_factor; 
  shiporder_weight 	:= shiporder_weight 	/ sqrt_query_factor; 
end if;

if wburst_start + wburst_length >= runperiod then
  wburst_length := runperiod - wburst_start;
end if;
if wburst_length < 0 then
  wburst_length := 0;
end if;

if show_changed_values then
  printline "Parameter values used in " $RWLOLTP_NAME ", key=" key_to_show;
  printline "\nConnect strings:\nnormal_connect="||normal_connect;
  printline "pool_connect="||pool_connect;
  printline "batch_connect="||batch_connect;
  printline "system_connect="||system_connect;
  printline "sysawr_connect="||sysawr_connect;
  printline "cruser_connect="||cruser_connect;
  printline "\nRate information (not considering bursts):";
  integer xeqpsec := threadcount * proccount * ratefactor / 0.08;
  if simulatebatch then
    printline "ratefactor is not used in busy loop";
  else
    if rategradient is not null then
      double xeqpslo := threadcount * proccount * ratefactor * (1.0-rategradient) / 0.08;
      double xeqpshi := threadcount * proccount * ratefactor * (1.0+rategradient) / 0.08;
      printf "ratefactor=%.2f (%d tps %.fs into run)\nrategradient=%.2f (gradual increase from %.f to %.f tps)\n"
        , ratefactor, xeqpsec, halfperiod, rategradient, xeqpslo, xeqpshi;
    else
      printline "ratefactor="||ratefactor " (" xeqpsec " tps)";
    end if;
    printline "per worker: " ratefactor/0.08 "/s average arrival rate, " 0.08/ratefactor "s average time";
    printline "per process: " threadcount*ratefactor/0.08 "/s average arrival rate, "
			  0.08/(ratefactor*threadcount) "s average time";
  end if;
  if normal_stddev is not null then
    printline "Arrival rates will be normal distributed with stddev=average*" normal_stddev;
  end if;
  printline "rampfactor="||rampfactor;
  printline "\nBursts:";
  if burst_length > 0 then
    printf "arrival rate burst factor %.2f (to %.0f tps) from %.0fs until %.0fs\n"
    , burst_factor, xeqpsec * burst_factor, burst_start, burst_start+burst_length;
  else
    printline "no arrival rate burst";
  end if;
  if wburst_count > 0 then
    printf "%d extra workers (total %.0f tps), from %.0fs until %.0fs (possibly different period in different processes)\n"
    , wburst_count,  xeqpsec *(1.0+1.0*wburst_count/threadcount), wburst_start, wburst_start + wburst_length;
  else
    printline "no worker thread burst";
  end if;
  if aburst_workers is not null then
    printf "activity in the first %.0fs will be %.0f tps from only %d threads,\n"
    , aburst_start, xeqpsec * aburst_pre_factor * aburst_workers/threadcount, aburst_workers;
    printf "after %.0fs it will be %.0f tps from all %d threads\n"
    , aburst_start, aburst_post_factor * xeqpsec, threadcount;
  else
    printline "no activity burst";
  end if;
  printline "\nPooling information:";
  if pool_type = "sessionpool" or pool_type = "connectionpool" then
    if pool_type = "connectionpool" then
      printline "rwl_min_pool=" rwl_min_pool " (as a connection pool)";
    else
      printline "rwl_min_pool=" rwl_min_pool;
    end if;
    printline "rwl_max_pool="||rwl_max_pool;
    printline "rwl_pool_release="||rwl_pool_release;
  else
    if pool_type = "drcp" then
      printline "normal pool uses drcp";
    else
      printline "normal pool is dedicated";
    end if;
  end if;
  if simulatebatch then
    printline "simulating batch using busy loops and only normal pool";
  else
    if batch_type = "sessionpool" or batch_type = "connectionpool" then
      if batch_type = "connectionpool" then
	printline "rwl_min_batch=" rwl_min_batch " (as a connection pool)";
      else
	printline "rwl_min_batch=" rwl_min_batch;
      end if;
      printline "rwl_max_batch="||rwl_max_batch;
    else
      if batch_type = "drcp" then
	printline "batch pool uses drcp";
      else
	printline "batch pool is dedicated";
      end if;
    end if;
  end if;
  if delay_length > 0 then
    if pool_type = "sessionpool" then
      printf "session pool reduced to %d..%d from %.0fs until %.0fs\n",
      delay_min_pool, delay_max_pool, delay_start, delay_start+delay_length;
    else
      printline "no pool delay as session pool is not in use";
    end if;
  else
    printline "no pool delay";
  end if;
  printline "threadcount="||threadcount;
  printline "proccount="||proccount;
  printline "\nMiscellaneous information:\nmakeorder_weight=" makeorder_weight  ;
  printline "aw_cols_256MB_doublings=" aw_cols_256MB_doublings;
  printline "aw_cols_skew=" aw_cols_skew;
  printline "queryorder_weight=" queryorder_weight;
  printline "searchproduct_weight=" searchproduct_weight;
  printline "makeinvoices_weight=" makeinvoices_weight;
  printline "complex_query_weight=" complex_query_weight;
  printline "stockup_weight=" stockup_weight;
  printline "aw_transaction_weight=" aw_transaction_weight;
  printline "awindex_query_weight=" awindex_query_weight;
  printline "shiporder_weight=" shiporder_weight;
  printline "orders_hashcount="||orders_hashcount;
  printline "query_order_max_limit="||query_order_max_limit;
  printline "cursor_cache_size="||cursor_cache_size;
  printline "hostname="||hostname;
  if fix_cursorleak is not null then
    if fix_cursorleak > 1.0 then fix_cursorleak := 1.0; end if;
    if fix_cursorleak < 0 then fix_cursorleak := 0; end if;
    if fix_cursorleak > 0.0 then
      printf "fix_cursorleak=%.6f\n",fix_cursorleak;
    else
      printline "no cursor leak";
      fix_cursorleak := null;
    end if;
  else
      printline "no cursor leak";
  end if;
  if fix_logoffrate is not null then
    if fix_logoffrate > 1.0 then fix_logoffrate := 1.0; end if;
    if fix_logoffrate < 0 then fix_logoffrate := 0; end if;
    if fix_logoffrate > 0.0 then
      printline "fix_logoffrate=" fix_logoffrate;
    else
      printline "no artificial logoff";
      fix_logoffrate := null;
    end if;
  else
      printline "no artificial logoff";
  end if;
  if fix_hardparse > 2 then fix_hardparse := 2; end if;
  if fix_hardparse < 0 then fix_hardparse := 0; end if;
  if fix_hardparse then
    printline "fix_hardparse at level " fix_hardparse;
  else
    printline "only soft parse";
  end if;
  if xc_enabled then
    printline "External Control is enabled";
  end if;
end if;

string svgmouse ;
if gnuplotjs != "" then
  svgmouse := "mouse jsdir '" gnuplotjs "'";
else
  svgmouse := "";
end if;

