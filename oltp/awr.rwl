# Copyright (c) 2021 Oracle Corporation
# Licensed under the Universal Permissive License v 1.0
# as shown at https://oss.oracle.com/licenses/upl/

# awr.rwl Code used to create awr snapshots and write awr reports
#
# History
#
# bengsig  31-mar-2021 - Make sure default awr is for most busy instance
# bengsig         2017 - Creation


integer dbid, instnum, snap, begsnap, endsnap;
file awrout; 

integer awrmode := 1; # 0:text, 1:html

# Declare a PL/SQL block that will get dbid and instance
# and do an awr snapshot
sql begawr
begin 
  select decode(con_dbid,dbid,dbid,con_dbid)
  , sys_context('USERENV','INSTANCE')
  into :b1, :b2
  from v$database;
  :b3 := dbms_workload_repository.create_snapshot;
end;
/
bindout 1 dbid, 2 instnum, 3 begsnap;
end;

# create the end awr snapshot
sql endawr
begin 
  :endsnap := dbms_workload_repository.create_snapshot;
end;
/
bindout 1 endsnap;
end;

# Disable bloom filter to get around awr problem
sql disable_bloom
  alter session set "_bloom_pruning_enabled" = false;
  ignoreerror; # As some ATP databases disallow alter session
end;

# create a variable that will hold one line being produced
# by dbms_workload_repository.awr_report_xxx
string(2000) awrline;

# And declare the query that actually does the text fetch
sql getawrtext
select * from table(dbms_workload_repository.awr_report_text(:1,:2,:3,:4));
array 100; 
bind 1 dbid, 2 instnum, 3 begsnap, 4 endsnap; 
define 1 awrline; 
end;

# And declare the query that actually does the html fetch
sql getawrhtml
select * from table(dbms_workload_repository.awr_report_html(:1,:2,:3,:4));
array 100; 
bind 1 dbid, 2 instnum, 3 begsnap, 4 endsnap; 
define 1 awrline; 
end;

# Get our preferred instance
# Note that this is executed against the repository
private integer prefinst;
sql get_pref_inst
  select instance
  from
  (select second, val1, val2, val3, val4, val5, val6, val7, val8
  from sysres where runnumber=:1
  and resname = 'INSTCNT')
  unpivot (val
  for instance
  in (val1 as 1, val2 as 2, val3 as 3, val4 as 4
  , val5 as 5, val6 as 6, val7 as 7, val8 as 8)
  )
  group by instance
  order by sum(val) desc, instance
  /
  define 1 prefinst;
  bind 1 runnumber;
  array 2;
end;


# List all open instances with preferred first
sql instlist
  select instance_number from gv$instance
  order by decode(instance_number,:1,1,2),instance_number;
  define 1 instnum;
  bind 1 prefinst;
  array 9;
end;

string(1000) htmlxtra;

# Declare a procedure that does the begin snapshort
procedure beginawr() nostatistics
  begawr; # generate snapshot
  commit;
  printline "gathered awr begin snapshot for dbid:" dbid 
    " inst:" instnum " snapshot:" begsnap;
end;

  
# Declare a procedure that does the end snapshot
# and generates the actual output file
procedure makeawr() nostatistics
  disable_bloom;
  endawr; # generate snapshot
  commit;

  # Make sure the "naked" html file name is for
  # the instance with highest use
  for get_pref_inst at rwloadsim and prefinst is null loop
    null; # Just get the first not null row
  end loop;

    printline "making awr for db:" dbid " inst:" prefinst
      " snaps:" begsnap "-" endsnap; 
    if awrmode = 0 then
      # text
      awrout := awrdirectory  subdir runnumber "/"  runnumber
        "_awr_" instnum "_" begsnap "_" endsnap ".txt";
      for getawrtext loop
	writeline awrout awrline;
      end;
      awrout := null; # this closes the file
    else
      # html
      htmlxtra := "";
      for instlist loop
	if prefinst is null or prefinst = instnum then 
	  # The default, use traditional ("naked") name
	  awrout := awrdirectory  subdir runnumber "/"  runnumber
	    "_awr.html";
	else
	  # For the others, use name with instance number
	  printline "making extra awr for db:" dbid " inst:" instnum
	    " snaps:" begsnap "-" endsnap; 
	  awrout := awrdirectory  subdir runnumber "/"  runnumber
	    "_" instnum "_awr.html";
	  htmlxtra ||= "<td><a href=\"" runnumber "_" instnum "_awr.html\">"
	    runnumber "_" instnum "_awr.html</td> ";
	end if;
	  
	for getawrhtml loop
	  writeline awrout awrline;
	end;
	awrout := null; # this closes the file
      end loop;
      awrout:= resultsdir subdir runnumber "/xtraawrs.txt";
      writeline awrout htmlxtra;
      awrout := null;
    end;
end;

