$include:"testuserinfo.rwl"
$include:"testdefault.rwl"
$include:"testpool.rwl"

# test implicit bind with array dml
integer ordno, linno, refno;
string(100) pl;
double b,c,e,g;

integer human := 0; $userswitch:human
$if human $then
  $debugon:0xa80
$else
  $randseed:42
$endif

# declare the SQL statement that inserts one order
sql insordsql
  insert into rwl_demo_ord
  ( ordno 
  , b 
  , pl 
  , c )
  values
  ( rwl_demo_ordno.nextval
  , :b
  , :pl
  , :c
  ) returning ordno into :ordno
  /
  # bind the three placeholders to variables
  bind sql;
  bindout : ordno ;
end;

# declare the SQL statement that inserts one order line
sql inslinsql
  insert into rwl_demo_lin
  ( ordno 
  , linno
  , e 
  , pl 
  , refno)
  values (:ordno, :linno, :e, :pl, :refno)
  /
  bind sql;
  array 5;
end;

integer max; # declarations can be put where needed
integer threads sum totord, totlin;
integer threads sum totget := 0;


# delcare the procedure that inserts an order with a random
# number of order lines
procedure insorder()
  b := uniform(0, 100); # a random value
  # Note how data types can be mixed in expressions (like in awk)
  # Here have a function call, a fixed string, and a variable
  pl := uniform(0,100) 
  || "___________________________________________________________" 
  || b;

  c := uniform(1.5,3.5); 
  insordsql; # Includes 'returning' so we now know ordno
  totord:=totord + 1; # counter orders created

  # Now create a random number of order lines and insert them
  max := uniform(1,10); # up to 10 order lines
  # Here is a for loop like in PL/SQL
  for linno := 1 .. max loop
    refno := uniform(1,200); # see rwltest.sql for where this comes from
    e := uniform(0,10);
    # erlang2 is erlang distributed with k=2
    pl := erlang2(1) || "abcabcabcabc";
    # array DML is not yet supported, but the same syntax will 
    # be used saving to array behind the scenes
    if human then
      printline "refno=" refno ", e=" e ", pl=", pl;
    end if;
    inslinsql; # insert this order line
    totlin:=totlin + 1; # counter order lines created
  end; 
  if human then
    printline "ordno=" ordno;
  end if;
  commit; # commit one order and its lines
end;

insorder(); 

sql selthem
  select linno, refno, pl
  from rwl_demo_lin
  where ordno = :ordno;
  bind sql; define sql; 
end;

for selthem at testpool loop
  printline linno, refno, pl;
end loop;

